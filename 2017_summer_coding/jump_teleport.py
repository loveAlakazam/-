# https://programmers.co.kr/learn/courses/30/lessons/12980?language=python3
def solution(n):
    # n 이 홀수 인지 짝수인지를 판별
    # n 이 0이 될때까지 계속 카운트한다
    ans =0
    while(n !=0):
        if n%2 ==0: #n이 짝수라면
            n= n/2
        else: #n이 홀수라면
            n= n-1
            ans +=1
    return ans

'''
* n이 홀수면 1을 뺀다.
* n이 짝수면 2를 나눈 몫의 결과를 새로운 n으로 한다.

* <==: 순간이동
* └1┘: 한 칸씩 이동

(N=5) 최소: 2
0--1--2--3--4--5
└1┘<==<=====└1┘


(N=6) 최소 : 2
0--1--2--3--4--5--6
└1┘<==└1┘<=========


(N=7) 최소:3
전략: n이 홀수면 n보다 1보다 작은 가장큰 짝수로 순간이동하는 경우를 반드시 넣는다.
즉 n=6일이라면 n=3에서 n=6으로 순간이동이 가능하다.
그다음에 n=3이라면 n은 홀수이므로 3보다 작은 짝수 2로 순간이동하는 경우를 찾는다.
n=1에서 n=2로 순간이동한다.

0--1--2--3--4--5--6--7
└1┘<==└1┘<========└1┘

(N=8) 최소:1
전략; n이 짝수라면 2로 나눈몫을 구하여 backtracking을 한다.
즉 최종목적지가 8일 때 4에서 8로 순간이동을 할 수있을 것이다.
다시 백트랙킹을 하여, 순간이동을하여 4로 도착하는 시작점은 2이다.
0--1--2--3--4--5--6--7--8
└1┘<==<=====<============
'''
